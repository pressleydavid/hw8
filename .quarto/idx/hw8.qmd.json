{"title":"hw8","markdown":{"yaml":{"title":"hw8","format":"html","editor":"visual"},"headingText":"Homwwork 8","containsRefs":false,"markdown":"\n\n```{r, message=FALSE, echo=FALSE}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(janitor)\nlibrary(lubridate)\nlibrary(corrplot)\nlibrary(gridExtra)\n```\n\n### Read Data\n```{r}\nsoul_bikes <- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\",\n                        locale = locale(encoding = \"latin1\"))\n\nnames(soul_bikes)\n\n#Transform:\n#- dates to datetime formats\n#- snake_case vars\n# Clean and transform the data\nsoul_bikes_clean <- soul_bikes |>\n  clean_names() |>  # This will convert \"Functioning Day\" to \"functioning_day\"\n  mutate(\n    date = dmy(date),\n    seasons = as.factor(seasons),\n    holiday = as.factor(holiday),\n    functioning_day = as.factor(functioning_day)\n  )\n\n\n# Check column names to verify\nnames(soul_bikes_clean)\n\n# Then filter\nsoul_bikes_functioning <- soul_bikes_clean[soul_bikes_clean$functioning_day == \"Yes\", ]\n```\n\n## Basic EDA\n```{r}\n#Basic EDA\n#Missing values\nmissing_summ <- soul_bikes |>\n  summarize(across(everything(), \\(x) sum(is.na(x)))) |>\n  pivot_longer(everything(),\n                names_to = \"variable\",\n                values_to = \"missing_count\")\nmissing_summ\n\n#By variable summary stats for numerics\nbike_summ_nums <- soul_bikes_functioning |>\n  select(where(is.numeric)) |>\n  summarize(across(everything(),\n                   list(\n                     mean = \\(x) mean(x, na.rm = TRUE),\n                     sd = \\(x) sd(x, na.rm = TRUE),\n                     median = \\(x) median(x, na.rm = TRUE),\n                     iqr = \\(x) IQR(x, na.rm = TRUE),\n                     min = \\(x) min(x, na.rm = TRUE),\n                     max = \\(x) max(x, na.rm = TRUE),\n                     n_missing = \\(x) sum(is.na(x))\n                   ))) |>\n              pivot_longer(\n                everything(),\n                names_to = c(\"column\", \"stat\"),\n                names_pattern = \"(.*)_(.*)\",\n                values_to = \"values\"\n              )\n\n#By variable summary stats for character/factor\nbike_summ_cats <- soul_bikes_functioning |>\n  select(where(is.character), where(is.factor)) |>\n  summarize(across(everything(),\n    list(\n      n_unique = \\(x) n_distinct(x),\n      n_missing = \\(x) sum(is.na(x))\n    )\n  )) |>\n  pivot_longer(\n    everything(),\n    names_to = c(\"column\", \"stat\"),\n    names_pattern = \"(.*)_(.*)\",\n    values_to = \"value\"\n  )\n\n# Factor levels summary\nfactor_levels <- soul_bikes_functioning |>\n  select(where(is.factor), where(is.character)) |>\n  summarize(across(everything(), \\(x) list(sort(unique(x))))) |>\n  pivot_longer(\n    everything(),\n    names_to = \"column\",\n    values_to = \"levels\"\n  ) |>\n  mutate(\n    n_levels = map_int(levels, length),\n    levels = map_chr(levels, toString)\n  )\n\n#7. Summarize across hours\ndaily_summ <- soul_bikes_functioning |>\n  group_by(date, seasons, holiday) |>\n  summarize(\n    #totals\n    total_bikes = sum(rented_bike_count),\n    total_rainfall = sum(rainfall_mm),\n    total_snowfall = sum(snowfall_cm),\n\n    #weather means\n    avg_temp = mean(temperature_c),\n    avg_humidity = mean(humidity_percent),\n    avg_wind_speed = mean(wind_speed_m_s),\n    avg_visibility = mean(visibility_10m),\n    avg_dew_point = mean(dew_point_temperature_c),\n    avg_solar_rad = mean(solar_radiation_mj_m2),\n    .groups = \"drop\"  # Drop grouping after summary\n  )\ndaily_summ\n\n#Summaries of numerics\nbike_summ_nums <- daily_summ |>\n  select(where(is.numeric)) |>\n  summarize(across(everything(),\n                   list(\n                     mean = \\(x) mean(x, na.rm = TRUE),\n                     sd = \\(x) sd(x, na.rm = TRUE),\n                     median = \\(x) median(x, na.rm = TRUE),\n                     iqr = \\(x) IQR(x, na.rm = TRUE),\n                     min = \\(x) min(x, na.rm = TRUE),\n                     max = \\(x) max(x, na.rm = TRUE),\n                     n_missing = \\(x) sum(is.na(x))\n                   ))) |>\n  pivot_longer(\n    everything(),\n    names_to = c(\"column\", \"stat\"),\n    names_pattern = \"(.*)_(.*)\",\n    values_to = \"values\"\n  )\nbike_summ_nums\n```\n\n\n### Plots \n```{r}\n# Calculate correlation matrix\ncor_matrix <- daily_summ |>\n  select(total_bikes, avg_temp, avg_humidity, avg_wind_speed,\n         avg_visibility, avg_solar_rad, total_rainfall, total_snowfall) |>\n  cor(use = \"complete.obs\")\ncor_matrix\n# Create correlation plot\ncorrplot(cor_matrix,\n         method = \"color\",\n         type = \"upper\",\n         addCoef.col = \"black\",\n         tl.col = \"black\",\n         tl.srt = 45,\n         diag = FALSE)\n\n# Individual scatter plots with trend lines\ntemp_v_rentals <- ggplot(daily_summ, aes(x = avg_temp, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"red\") +\n  labs(title = \"Temperature vs Bike Rentals\",\n       x = \"Average Temperature (Â°C)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nhumid_v_rentals <- ggplot(daily_summ, aes(x = avg_humidity, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"blue\") +\n  labs(title = \"Humidity vs Bike Rentals\",\n       x = \"Average Humidity (%)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nsun_v_rentals <- ggplot(daily_summ, aes(x = avg_solar_rad, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"orange\") +\n  labs(title = \"Solar Radiation vs Bike Rentals\",\n       x = \"Average Solar Radiation (MJ/m2)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nvis_v_rentals <- ggplot(daily_summ, aes(x = avg_visibility, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"green4\") +\n  labs(title = \"Visibility vs Bike Rentals\",\n       x = \"Average Visibility (10m)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\n# Arrange plots in a grid\n\ngrid.arrange(temp_v_rentals, humid_v_rentals, sun_v_rentals, vis_v_rentals, ncol = 2)\n```\n\n\n## MLR \n\n```{r}\n#Split the data\nset.seed(123)\nbike_split <- initial_split(daily_summ,\n                            prop = 0.75,\n                            strata = seasons)\n\ntrn <- training(bike_split)\ntst <- testing(bike_split)\nfolds <- vfold_cv(trn, v = 10, strata = seasons)\n\n\n#Fitting MLR Models\n#Recipe 1\nrecipe_1 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  # Extract day of week and create weekend factor\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")  # explicitly set levels\n    )\n  ) |>\n  # Remove the intermediate date_dow variable\n  step_rm(date_dow) |>\n  # Standardize numeric variables\n  step_normalize(all_numeric_predictors()) |>\n  # Create dummy variables\n  step_dummy(all_nominal_predictors())\n\n\nrecipe_1 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n\n#Recipe 2\nrecipe_2 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")\n    )\n  ) |>\n  step_rm(date_dow) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  # Changed interaction syntax to use explicit formulas\n  step_interact(terms = ~ starts_with(\"seasons_\"):starts_with(\"holiday_\")) |>\n  step_interact(terms = ~ starts_with(\"seasons_\"):avg_temp) |>\n  step_interact(terms = ~ total_rainfall:avg_temp)\n\nrecipe_2 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n#Recipe 3\n\nrecipe_3 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")\n    )\n  ) |>\n  step_rm(date_dow) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  # Modify interaction specification to use separate terms=\n  step_interact(terms = ~ starts_with(\"seasons_\") * starts_with(\"holiday_\") +\n                  starts_with(\"seasons_\") * avg_temp +\n                  total_rainfall * avg_temp) |>\n  step_poly(total_rainfall, avg_temp, avg_humidity, avg_wind_speed,\n            avg_visibility, avg_dew_point, avg_solar_rad,\n            degree = 2)\n# Let's verify it works\nrecipe_3 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n\n#setup LM engine\n# Set up linear model specification\nlm_spec <- linear_reg() |>\n  set_engine(\"lm\")\n\n# Create workflows for each recipe\nworkflow_1 <- workflow() |>\n  add_recipe(recipe_1) |>\n  add_model(lm_spec)\n\nworkflow_2 <- workflow() |>\n  add_recipe(recipe_2) |>\n  add_model(lm_spec)\n\nworkflow_3 <- workflow() |>\n  add_recipe(recipe_3) |>\n  add_model(lm_spec)\n\n# Fit models using 10-fold CV\ncv_fit_1 <- workflow_1 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\ncv_fit_2 <- workflow_2 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\ncv_fit_3 <- workflow_3 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\n# Compare CV results\ncv_results <- bind_rows(\n  collect_metrics(cv_fit_1) |> mutate(model = \"Model 1\"),\n  collect_metrics(cv_fit_2) |> mutate(model = \"Model 2\"),\n  collect_metrics(cv_fit_3) |> mutate(model = \"Model 3\")\n) |>\n  arrange(mean)\n\nprint(cv_results)\n\n\n#Model 3 is best fit\n# Use last_fit with the best model (Model 3)\nfinal_fit <- workflow_3 |>\n  last_fit(bike_split)\n\n# Get test set metrics\ncollect_metrics(final_fit)\n\n# Get coefficients\nfinal_fit |>\n  extract_fit_parsnip() |>\n  tidy()\n```\n","srcMarkdownNoYaml":"\n\n## Homwwork 8\n```{r, message=FALSE, echo=FALSE}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(janitor)\nlibrary(lubridate)\nlibrary(corrplot)\nlibrary(gridExtra)\n```\n\n### Read Data\n```{r}\nsoul_bikes <- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/SeoulBikeData.csv\",\n                        locale = locale(encoding = \"latin1\"))\n\nnames(soul_bikes)\n\n#Transform:\n#- dates to datetime formats\n#- snake_case vars\n# Clean and transform the data\nsoul_bikes_clean <- soul_bikes |>\n  clean_names() |>  # This will convert \"Functioning Day\" to \"functioning_day\"\n  mutate(\n    date = dmy(date),\n    seasons = as.factor(seasons),\n    holiday = as.factor(holiday),\n    functioning_day = as.factor(functioning_day)\n  )\n\n\n# Check column names to verify\nnames(soul_bikes_clean)\n\n# Then filter\nsoul_bikes_functioning <- soul_bikes_clean[soul_bikes_clean$functioning_day == \"Yes\", ]\n```\n\n## Basic EDA\n```{r}\n#Basic EDA\n#Missing values\nmissing_summ <- soul_bikes |>\n  summarize(across(everything(), \\(x) sum(is.na(x)))) |>\n  pivot_longer(everything(),\n                names_to = \"variable\",\n                values_to = \"missing_count\")\nmissing_summ\n\n#By variable summary stats for numerics\nbike_summ_nums <- soul_bikes_functioning |>\n  select(where(is.numeric)) |>\n  summarize(across(everything(),\n                   list(\n                     mean = \\(x) mean(x, na.rm = TRUE),\n                     sd = \\(x) sd(x, na.rm = TRUE),\n                     median = \\(x) median(x, na.rm = TRUE),\n                     iqr = \\(x) IQR(x, na.rm = TRUE),\n                     min = \\(x) min(x, na.rm = TRUE),\n                     max = \\(x) max(x, na.rm = TRUE),\n                     n_missing = \\(x) sum(is.na(x))\n                   ))) |>\n              pivot_longer(\n                everything(),\n                names_to = c(\"column\", \"stat\"),\n                names_pattern = \"(.*)_(.*)\",\n                values_to = \"values\"\n              )\n\n#By variable summary stats for character/factor\nbike_summ_cats <- soul_bikes_functioning |>\n  select(where(is.character), where(is.factor)) |>\n  summarize(across(everything(),\n    list(\n      n_unique = \\(x) n_distinct(x),\n      n_missing = \\(x) sum(is.na(x))\n    )\n  )) |>\n  pivot_longer(\n    everything(),\n    names_to = c(\"column\", \"stat\"),\n    names_pattern = \"(.*)_(.*)\",\n    values_to = \"value\"\n  )\n\n# Factor levels summary\nfactor_levels <- soul_bikes_functioning |>\n  select(where(is.factor), where(is.character)) |>\n  summarize(across(everything(), \\(x) list(sort(unique(x))))) |>\n  pivot_longer(\n    everything(),\n    names_to = \"column\",\n    values_to = \"levels\"\n  ) |>\n  mutate(\n    n_levels = map_int(levels, length),\n    levels = map_chr(levels, toString)\n  )\n\n#7. Summarize across hours\ndaily_summ <- soul_bikes_functioning |>\n  group_by(date, seasons, holiday) |>\n  summarize(\n    #totals\n    total_bikes = sum(rented_bike_count),\n    total_rainfall = sum(rainfall_mm),\n    total_snowfall = sum(snowfall_cm),\n\n    #weather means\n    avg_temp = mean(temperature_c),\n    avg_humidity = mean(humidity_percent),\n    avg_wind_speed = mean(wind_speed_m_s),\n    avg_visibility = mean(visibility_10m),\n    avg_dew_point = mean(dew_point_temperature_c),\n    avg_solar_rad = mean(solar_radiation_mj_m2),\n    .groups = \"drop\"  # Drop grouping after summary\n  )\ndaily_summ\n\n#Summaries of numerics\nbike_summ_nums <- daily_summ |>\n  select(where(is.numeric)) |>\n  summarize(across(everything(),\n                   list(\n                     mean = \\(x) mean(x, na.rm = TRUE),\n                     sd = \\(x) sd(x, na.rm = TRUE),\n                     median = \\(x) median(x, na.rm = TRUE),\n                     iqr = \\(x) IQR(x, na.rm = TRUE),\n                     min = \\(x) min(x, na.rm = TRUE),\n                     max = \\(x) max(x, na.rm = TRUE),\n                     n_missing = \\(x) sum(is.na(x))\n                   ))) |>\n  pivot_longer(\n    everything(),\n    names_to = c(\"column\", \"stat\"),\n    names_pattern = \"(.*)_(.*)\",\n    values_to = \"values\"\n  )\nbike_summ_nums\n```\n\n\n### Plots \n```{r}\n# Calculate correlation matrix\ncor_matrix <- daily_summ |>\n  select(total_bikes, avg_temp, avg_humidity, avg_wind_speed,\n         avg_visibility, avg_solar_rad, total_rainfall, total_snowfall) |>\n  cor(use = \"complete.obs\")\ncor_matrix\n# Create correlation plot\ncorrplot(cor_matrix,\n         method = \"color\",\n         type = \"upper\",\n         addCoef.col = \"black\",\n         tl.col = \"black\",\n         tl.srt = 45,\n         diag = FALSE)\n\n# Individual scatter plots with trend lines\ntemp_v_rentals <- ggplot(daily_summ, aes(x = avg_temp, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"red\") +\n  labs(title = \"Temperature vs Bike Rentals\",\n       x = \"Average Temperature (Â°C)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nhumid_v_rentals <- ggplot(daily_summ, aes(x = avg_humidity, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"blue\") +\n  labs(title = \"Humidity vs Bike Rentals\",\n       x = \"Average Humidity (%)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nsun_v_rentals <- ggplot(daily_summ, aes(x = avg_solar_rad, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"orange\") +\n  labs(title = \"Solar Radiation vs Bike Rentals\",\n       x = \"Average Solar Radiation (MJ/m2)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\nvis_v_rentals <- ggplot(daily_summ, aes(x = avg_visibility, y = total_bikes)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", color = \"green4\") +\n  labs(title = \"Visibility vs Bike Rentals\",\n       x = \"Average Visibility (10m)\",\n       y = \"Total Daily Rentals\") +\n  theme_minimal()\n\n# Arrange plots in a grid\n\ngrid.arrange(temp_v_rentals, humid_v_rentals, sun_v_rentals, vis_v_rentals, ncol = 2)\n```\n\n\n## MLR \n\n```{r}\n#Split the data\nset.seed(123)\nbike_split <- initial_split(daily_summ,\n                            prop = 0.75,\n                            strata = seasons)\n\ntrn <- training(bike_split)\ntst <- testing(bike_split)\nfolds <- vfold_cv(trn, v = 10, strata = seasons)\n\n\n#Fitting MLR Models\n#Recipe 1\nrecipe_1 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  # Extract day of week and create weekend factor\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")  # explicitly set levels\n    )\n  ) |>\n  # Remove the intermediate date_dow variable\n  step_rm(date_dow) |>\n  # Standardize numeric variables\n  step_normalize(all_numeric_predictors()) |>\n  # Create dummy variables\n  step_dummy(all_nominal_predictors())\n\n\nrecipe_1 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n\n#Recipe 2\nrecipe_2 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")\n    )\n  ) |>\n  step_rm(date_dow) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  # Changed interaction syntax to use explicit formulas\n  step_interact(terms = ~ starts_with(\"seasons_\"):starts_with(\"holiday_\")) |>\n  step_interact(terms = ~ starts_with(\"seasons_\"):avg_temp) |>\n  step_interact(terms = ~ total_rainfall:avg_temp)\n\nrecipe_2 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n#Recipe 3\n\nrecipe_3 <- recipe(total_bikes ~ ., data = trn) |>\n  update_role(date, new_role = \"ID\") |>\n  step_date(date, features = \"dow\") |>\n  step_mutate(\n    weekend = factor(\n      if_else(date_dow %in% c(\"Sat\", \"Sun\"), \"weekend\", \"weekday\"),\n      levels = c(\"weekday\", \"weekend\")\n    )\n  ) |>\n  step_rm(date_dow) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  # Modify interaction specification to use separate terms=\n  step_interact(terms = ~ starts_with(\"seasons_\") * starts_with(\"holiday_\") +\n                  starts_with(\"seasons_\") * avg_temp +\n                  total_rainfall * avg_temp) |>\n  step_poly(total_rainfall, avg_temp, avg_humidity, avg_wind_speed,\n            avg_visibility, avg_dew_point, avg_solar_rad,\n            degree = 2)\n# Let's verify it works\nrecipe_3 |>\n  prep() |>\n  bake(new_data = NULL) |>\n  glimpse()\n\n\n#setup LM engine\n# Set up linear model specification\nlm_spec <- linear_reg() |>\n  set_engine(\"lm\")\n\n# Create workflows for each recipe\nworkflow_1 <- workflow() |>\n  add_recipe(recipe_1) |>\n  add_model(lm_spec)\n\nworkflow_2 <- workflow() |>\n  add_recipe(recipe_2) |>\n  add_model(lm_spec)\n\nworkflow_3 <- workflow() |>\n  add_recipe(recipe_3) |>\n  add_model(lm_spec)\n\n# Fit models using 10-fold CV\ncv_fit_1 <- workflow_1 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\ncv_fit_2 <- workflow_2 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\ncv_fit_3 <- workflow_3 |>\n  fit_resamples(\n    resamples = folds,\n    metrics = metric_set(rmse)\n  )\n\n# Compare CV results\ncv_results <- bind_rows(\n  collect_metrics(cv_fit_1) |> mutate(model = \"Model 1\"),\n  collect_metrics(cv_fit_2) |> mutate(model = \"Model 2\"),\n  collect_metrics(cv_fit_3) |> mutate(model = \"Model 3\")\n) |>\n  arrange(mean)\n\nprint(cv_results)\n\n\n#Model 3 is best fit\n# Use last_fit with the best model (Model 3)\nfinal_fit <- workflow_3 |>\n  last_fit(bike_split)\n\n# Get test set metrics\ncollect_metrics(final_fit)\n\n# Get coefficients\nfinal_fit |>\n  extract_fit_parsnip() |>\n  tidy()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"hw8.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"hw8","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}